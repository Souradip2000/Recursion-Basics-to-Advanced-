Write a return statement for every functional recursion call. Understand using the recursion tree. Without return statement the recursion tree wouldn't be possible.

In case of multiple recursion calls within the same function, the first recursion call will be completed and then the second one will start executing.

Time complexity of code to find nth fibonacci term using recursion is O( 2^n ).
    --> this is because in every recursion call, the problem is split into 2 halves, and in the recursion tree we can see that at each level has 2^n calls.
[Draw the recursion tree of Fibonacci series to understand its time complexity.]



Make use of global variables to maintain count inside recursive function.


Difference between functional and parameterised recursioin: 
    -    functional recursion : function returns a value and ans comes after all the functions return 
    -    parameterised recursion : output is displayed when the base case is reached
[ Draw the recursion tree for printing the factorial of n numbers using both these methods. ]



Simply write the code of the pattern you observe.                 Recursion will be formed.
Also just draw the recursion tree according to the pattern.



To find combinations in sorted order, sort the array first.


When you have to print only one subsequence, then print the first subsequence satisfying the conditons and the stop furthur recursion calls.
